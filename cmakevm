#!/usr/bin/env python

import argparse, os, urllib

versions_darwin = {
	"3.4.0":"https://cmake.org/files/v3.4/cmake-3.4.0-Darwin-x86_64.tar.gz",
	"3.4.1":"https://cmake.org/files/v3.4/cmake-3.4.1-Darwin-x86_64.tar.gz",
	"3.3.0":"https://cmake.org/files/v3.3/cmake-3.3.0-Darwin-x86_64.tar.gz",
	"3.3.1":"https://cmake.org/files/v3.3/cmake-3.3.1-Darwin-x86_64.tar.gz",
	"3.3.2":"https://cmake.org/files/v3.3/cmake-3.3.2-Darwin-x86_64.tar.gz",
	"3.2.0":"https://cmake.org/files/v3.2/cmake-3.2.0-Darwin-x86_64.tar.gz",
	"3.2.1":"https://cmake.org/files/v3.2/cmake-3.2.1-Darwin-x86_64.tar.gz",
	"3.2.2":"https://cmake.org/files/v3.2/cmake-3.2.2-Darwin-x86_64.tar.gz",
	"3.2.3":"https://cmake.org/files/v3.2/cmake-3.2.3-Darwin-x86_64.tar.gz",
	"3.1.0":"https://cmake.org/files/v3.1/cmake-3.1.0-Darwin64.tar.gz",
	"3.1.1":"https://cmake.org/files/v3.1/cmake-3.1.1-Darwin-x86_64.tar.gz",
	"3.1.2":"https://cmake.org/files/v3.1/cmake-3.1.2-Darwin-x86_64.tar.gz",
	"3.1.3":"https://cmake.org/files/v3.1/cmake-3.1.3-Darwin-x86_64.tar.gz",
	"3.0.0":"https://cmake.org/files/v3.0/cmake-3.0.0-Darwin64-universal.tar.gz",
	"3.0.1":"https://cmake.org/files/v3.0/cmake-3.0.1-Darwin64-universal.tar.gz",
	"3.0.2":"https://cmake.org/files/v3.0/cmake-3.0.2-Darwin64-universal.tar.gz",
	"2.8.12.2":"https://cmake.org/files/v2.8/cmake-2.8.12.2-Darwin64-universal.tar.gz"
}
cmakevm_home = os.path.join(os.path.expanduser("~"), ".cmakevm")

def create_home_folder_if_needed():
	if not os.path.exists(cmakevm_home):
		os.makedirs(cmakevm_home)

def list_versions():
	for version in versions_darwin:
		print(version)

def download_all():
	create_home_folder_if_needed()
	for version in versions_darwin:
		url = versions_darwin[version]
		filename = url.split("/")[-1]
		if os.path.exists(os.path.join(cmakevm_home, filename)):
			print(filename + " exists at "+ cmakevm_home +", skip downloading")
		else:
			print("Downloading from " + url)
			urlopener = urllib.URLopener()
			urlopener.retrieve(url, os.path.join(cmakevm_home, filename))


def main():
	parser = argparse.ArgumentParser(description='Process some integers.')
	parser.add_argument('--list', action='store_true')
	parser.add_argument('--downloadall', action='store_true')
	args = parser.parse_args()

	if args.list:
		list_versions()

	if args.downloadall:
		download_all()
    # my code here

if __name__ == "__main__":
    main()